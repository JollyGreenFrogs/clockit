services:
  # Frontend - React served by Nginx
  clockit-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:80"
    depends_on:
      - clockit-backend
    networks:
      clockit-network:
        ipv4_address: ${FRONTEND_IP:-172.20.0.10}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Backend - FastAPI application
  clockit-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - CLOCKIT_DATA_DIR=/app/data
      - PYTHONPATH=/app
      - DATABASE_TYPE=postgres
      - POSTGRES_HOST=${DATABASE_IP:-172.20.0.20}
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-clockit}
      - POSTGRES_USER=${POSTGRES_USER:-clockit}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DISABLE_HTTPS_REDIRECT=${DISABLE_HTTPS_REDIRECT:-false}
    depends_on:
      - clockit-db
    networks:
      clockit-network:
        ipv4_address: ${BACKEND_IP:-172.20.0.30}
    volumes:
      - clockit_data:/app/data
      - clockit_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # PostgreSQL database for cloud storage option
  clockit-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-clockit}
      - POSTGRES_USER=${POSTGRES_USER:-clockit}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      clockit-network:
        ipv4_address: ${DATABASE_IP:-172.20.0.20}
    # Port exposure removed for security - use internal networking only
    # To access database for debugging, use: docker exec -it clockit-db psql -U clockit
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-clockit} -d ${POSTGRES_DB:-clockit}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  clockit_data:
    driver: local
  clockit_logs:
    driver: local
  postgres_data:
    driver: local

networks:
  clockit-network:
    driver: bridge
    ipam:
      config:
        # Dev environment: 172.20.0.0/24, Prod environment: 172.20.1.0/24
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/24}
          gateway: ${NETWORK_GATEWAY:-172.20.0.1}